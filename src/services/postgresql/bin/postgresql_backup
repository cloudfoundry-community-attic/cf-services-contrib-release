#!/usr/bin/env ruby
# Copyright (c) 2009-2011 VMware, Inc.
#
# This script is used to backup Postgresql instances used in AuaaS.

ENV["BUNDLE_GEMFILE"] ||= File.expand_path("../../Gemfile", __FILE__)
require 'bundler/setup'
require 'vcap_services_base'

$:.unshift(File.expand_path("../../lib", __FILE__))
require 'postgresql_service/node'
require 'postgresql_service/util'
require 'pg'

module VCAP
  module Services
    module Postgresql
    end
  end
end

class VCAP::Services::Postgresql::Backup < VCAP::Services::Base::Backup
  include VCAP::Services::Postgresql::Util

  def default_config_file
    File.join(File.dirname(__FILE__), '..', 'config', 'postgresql_backup.yml')
  end

  def backup_db

    @config["local_db"] ||= "sqlite3:/var/vcap/store/postgresql_node.db"

    opts = {
      :service_name => @config["service_name"],
      :local_db => @config["local_db"],
      :backup_cmd => @config["backup_cmd"],
      :pg_config_by_version => @config["postgresql"],
      :backup_path => @config["backup_base_dir"]
    }

    use_warden= @config["use_warden"] || false

    missing_opts = opts.keys.select{|key| opts[key] == nil}
    unless missing_opts.empty?
      echo "Missing required configuration items #{missing_opts.inspect}",true
      return 1
    end

    # Optional backup timeout config, default is no timeout
    opts[:timeout] = @config["timeout"] || 0

    # Enable ORM to get the information of provisioned services
    begin
      VCAP::Services::Postgresql::Node.setup_datamapper(:default, opts[:local_db])
    rescue => e
      echo "Exception while setting up the local database: #{e}"
      return 1
    end

    service_class = VCAP::Services::Postgresql::Node.pgProvisionedServiceClass(use_warden)

    dbs = service_class.all.map { |s| s.name }

    current_time = Time.now

    echo "Begin backup at #{current_time}"
    success, failed, ignored = [0,0,0]
    dbs.each do |name|
      provisionedservice = service_class.get(name)
      unless provisionedservice
        echo "The provisioned service with name #{name} does not exist!"
        result = -1
      else
        # provisioed database
        default_user = provisionedservice.pgbindusers.all(:default_user => true)[0]
        if default_user.nil?
          echo "The provisioned service with name #{name} has no default user."
          result = 1
        else
          version = provisionedservice.version
          pg_config = opts[:pg_config_by_version][version] || {}
          extra_opts = {
            :name => name,
            :ts => current_time,
            :user => default_user[:user],
            :passwd => default_user[:password],
            :host => use_warden ? provisionedservice.ip: pg_config["host"],
            :port => pg_config["port"],
            :dump_bin => pg_config["dump_bin"]
          }
          result = exe_backup_db(opts.merge(extra_opts))
        end
      end

      case result
      when 0
        success += 1
      when 1
        failed += 1
      when -1
        ignored += 1
      else
      end

      raise Interrupt, "Interrupted" if @shutdown
    end
    echo "Backup begins at #{current_time} complete. Success: #{success}. Failed #{failed}. Ignored #{ignored}."
    0
  end

  def exe_backup_db(opts)
    backup_cmd, name, ts =
      %w(backup_cmd name ts).map{ |k| opts[k.to_sym] }
    # dir structure looks like \backups\<service-name>\<aa>\<bb>\<cc>\
    # <aabbcc-rest-of-instance-guid>\<seconds_since_epoc>\<service specific data>
    full_path = get_dump_path(name)
    opts.merge!({:full_path => full_path})

    backup_cmd = opts.keys.inject(backup_cmd) do|cmd, key|
      cmd.gsub(":"+key.to_s, opts[key].to_s)
    end

    pgpass_exe_cmd(name,
      *(%w(host port user passwd).map{ |k| opts[k.to_sym] }),
      backup_cmd) do |pgpass_file, pgpass_cmd|
      on_err = Proc.new do |cmd, code, msg|
        echo "CMD '#{cmd}' exit with code: #{code}. Message: #{msg}",true
        cleanup(full_path)
      end
      t1 = Time.now
      FileUtils.mkdir_p(full_path) unless File.exists?(full_path)
      res = CMDHandle.execute("export PGPASSFILE=#{pgpass_file}; #{pgpass_cmd}", opts[:timeout].to_i, on_err)
      t2 = Time.now
      echo "Backup for db #{name} complete in #{t2-t1} seconds."
      return res ? 0:1
    end
  rescue => e
    echo "Error when backup db #{opts[:name]} for #{e}: #{e.backtrace.join("\n")}", true
    cleanup(full_path)
    return 1
  end

  def cleanup(path)
    FileUtils.rm_rf(path) if path
  end
end

VCAP::Services::Postgresql::Backup.new.start
